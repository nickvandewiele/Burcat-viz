var entries = ['formula', 'formula_name_structure_1','reference_1', 'hf298_1'];

d3.xml("/data/BURCAT_THR.xml", function(xml) {

	var table = d3.select("table");
	var thead = d3.select("thead");
	//add header row:
	var header_entries = ["CAS"].concat(entries);
	thead.selectAll("th").data(header_entries).enter().append('th').text(function(d) {
		return d;
	});

	//append rows for each entry of 'specie':
	var species = d3.select(xml).selectAll("specie")[0];
	var tr = d3.select("tbody").selectAll("tr").data(species).enter().append("tr");

	// CAS
	tr.selectAll("tr").data(function(d) {
		return d3.select(d)[0];
	}).enter().append("td").text(function(d) {
		var cas = d.getAttribute("CAS");
		return cas;
	}).attr('id', 'CAS');

	//enter data for the child nodes:
	for (var i = 0; i < entries.length; i++) {
		var entry = entries[i];
		tr.selectAll("tr").data(function(d) {
			return d3.select(d).select(entry)[0];
		}).enter().append("td").text(function(d) {
			return (d == null) ? "" : d.textContent;
		}).attr('id', entry);
	}
	
	 //remove CAS number from td:
	 d3.selectAll('#CAS').text('');
	 //append an img element and set it to the image generated by the CAS number:
	 d3.selectAll('#CAS').append("img")
	 //.attr("src", function(d){return create_image_url(d.getAttribute("CAS"));});
	 .attr("alt", function(d){return d.getAttribute("CAS");});
	 

	/*
	 * https://github.com/jmosbech/StickyTableHeaders
	 * bower install StickyTableHeaders
	 */
	$('table').stickyTableHeaders();

	//select all table rows and print values in kJ by default:
	var hf_arr = d3.selectAll("#hf298_1")[0],
	    hf_data = [];
	
	for(var i = 0; i < hf_arr.length; i++){
		var unit_kcal = false,//reset
		    hf_val = hf_arr[i].textContent;
		unit_kcal = hf_val.toUpperCase().indexOf('CAL') > -1 ? true: false;
		
		hf_val = hf_val.split('KJ')[0].split('KCAL')[0];
		arr = hf_val.split('+/-');
		hf_val = parseFloat(arr[0].trim());
		hf_data.push((unit_kcal? hf_val*4.186 : hf_val).toFixed(2));
	}

	//update existing nodes with parsed values in kJ:
	var hf_nodes = d3.selectAll("#hf298_1");
	hf_nodes.data(hf_data).text(function (d){return d;});
	
	 //we push a new header entry 'inchi', and enter the new data array in the header rows:
  	header_entries.push('uncertainty');
	thead.selectAll("th").data(header_entries).enter().append('th').text(function(d) {
		return d;
	});
	
	//we select all table rows and add an entry for the 'uncertainty' table cell:
	tr.selectAll("tr").data(function(d) {
		return d3.select(d)[0];
	}).enter().append("td").text(function(d) {
		var uncertainty = get_uncertainty(d);
		return uncertainty; 
	}).attr('id', 'uncertainty');
	
	  
  //we push a new header entry 'inchi', and enter the new data array in the header rows:
  	header_entries.push('inchi');
	thead.selectAll("th").data(header_entries).enter().append('th').text(function(d) {
		return d;
	});
	
	//we select all table rows and add an entry for the inchi table cell:
	tr.selectAll("tr").data(function(d) {
		return d3.select(d)[0];
	}).enter().append("td").text(function(d) {
		var cas = d.getAttribute("CAS");
		var inchi = get_inchi(cas);
		return inchi;
	}).attr('id', 'inchi');
	
	sortColumns(header_entries);

});

function httpGet(theUrl)
{
    var xmlHttp = null;

    xmlHttp = new XMLHttpRequest();
    //xmlHttp.timeout = 1000;//only possible for asynchronous requests
    xmlHttp.open( "GET", theUrl, false );//asynchronous = true/false
    xmlHttp.send( null );
    return xmlHttp.responseText;
}
function get_inchi(cas_string){
	if(cas_string.indexOf('N/A')>-1) return '';
	cas_arr = cas_string.split(' ');
	var cas = cas_arr[0]; 
	var base_url = 'http://cactus.nci.nih.gov/chemical/structure/';
	//var inchi = httpGet(base_url + cas + "/stdinchi");
	var inchi = base_url + cas + "/stdinchi";
	return inchi.indexOf("404") > -1 ? '': inchi;
}
function create_image_url(cas) {
	var base_url = "http://cactus.nci.nih.gov/chemical/structure/";
	var background_color = "e5f5f9";//hex
	return base_url + cas + "/image?format=png&bgcolor=%23"+background_color+"&header=\"" + cas +"\"";
}


function get_uncertainty(species) {

	var unit_kcal = false, //reset
	hf = species.getElementsByTagName('hf298_1');
	
	if (hf.length == 0){//check if specie node has 'hf298_1' child:
		return NaN;
	}
	hf_val = hf[0].textContent;
	unit_kcal = hf_val.toUpperCase().indexOf('CAL') > -1 ? true: false;
	
	hf_val = hf_val.split('KJ')[0].split('KCAL')[0];
	hf_val = hf_val.split('+/-');

	if (hf_val.length > 1) {
		uncertainty = parseFloat(hf_val[1].trim());
		uncertainty = ( unit_kcal ? uncertainty * 4.186 : uncertainty).toFixed(2);
	} else {
		uncertainty = NaN;
	}
	
	return uncertainty;
}

//keep track of the order in which the IDs are ordered:
var aAsc = [];


/*
 *  https://github.com/Sjeiti/TinySort
 *  bower install tinysort
 */

function sortTable(id) {
	aAsc[id] = aAsc[id] == 'asc' ? 'desc' : 'asc';
	//use jQuery ID selector to access td element with ID = parameter:
	$('table>tbody>tr').tsort('td#' + id, {
		order : aAsc[id]
	});

}

function redraw() {
	sortTable(menu.property("value"));
}

function change() {
	d3.transition().each(redraw);
}
function sortColumns(header_entries){
	//select thead header elements: which contain the same strings as the td elements in tbody:
	d3.selectAll("thead th").on('click', sortTable);

	//append 'change' event to menu select elements:
	var menu = d3.select("#menu select").on("change", change);

	//create menu options:
	menu.selectAll("option")
      .data(header_entries)
    .enter().append("option")
      .text(function(d) { return d; });
	//set default option:
  	menu.property("value", "formula");
}
